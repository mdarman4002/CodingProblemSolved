class Solution {
    public int equalSubstring(String s, String t, int maxCost) {
        int n = s.length();
        int ans = 0;
        int window = 0; // Sum of absolute differences in the current window
        int left = 0; // Left pointer of the sliding window

        for (int right = 0; right < n; right++) {
            // Add the cost of the current character pair to the window
            window += Math.abs(s.charAt(right) - t.charAt(right));
            
            // If the window's cost exceeds maxCost, shrink the window from the left
            while (window > maxCost) {
                window -= Math.abs(s.charAt(left) - t.charAt(left));
                left++;
            }
            
            // Update the maximum length of the valid substring
            ans = Math.max(ans, right - left + 1);
        }
        
        return ans;
    }
}
