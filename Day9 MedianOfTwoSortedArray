import java.util.Arrays;

public class MedianOfTwoSortedArray {

    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] newArray = new int[nums1.length + nums2.length];

        for (int i = 0; i < nums1.length; i++) {
            newArray[i] = nums1[i];
        }
        for (int i = 0; i < nums2.length; i++) {
            newArray[nums1.length + i] = nums2[i];
        }

        Arrays.sort(newArray);

        if (newArray.length % 2 == 0) {
           
            double median1 = (double) (newArray[newArray.length / 2 - 1] + newArray[newArray.length / 2]) / 2; 
            return median1;
        } else {

            double median2 = newArray[newArray.length / 2];
            return median2;
        }
    }

    public static void main(String args[]) {
        int[] nums1 = {1, 2, 6};
        int[] nums2 = {3, 4, 5};

        System.out.println(findMedianSortedArrays(nums1, nums2));
    }
}

//------------------------------others----------------------------

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int length1 = nums1.length;
        int length2 = nums2.length;
        if (length2 < length1) {
            return this.findMedianSortedArrays(nums2, nums1);
        }
        int leftHalf = (length1 + length2 + 1) / 2;
        int left = 0;
        int right = length1;
        while (left <= right) {
            int nums1Cut = left + (right - left) / 2;
            int nums2Cut = leftHalf - nums1Cut;

            int nums1Left = nums1Cut == 0 ? Integer.MIN_VALUE : nums1[nums1Cut - 1];
            int nums1Right = nums1Cut == length1 ? Integer.MAX_VALUE : nums1[nums1Cut];
            int nums2Left = nums2Cut == 0 ? Integer.MIN_VALUE : nums2[nums2Cut - 1];
            int nums2Right = nums2Cut == length2 ? Integer.MAX_VALUE : nums2[nums2Cut];
            if (nums1Left <= nums2Right && nums2Left <= nums1Right) {
                if ((length1 + length2) % 2 == 1) {
                    return (double) Math.max(nums1Left, nums2Left);
                } else {
                    return (double) Math.max(nums1Left, nums2Left) / 2.0 + (double) Math.min(nums1Right, nums2Right) / 2.0;
                }
            //} else if (nums1Right < nums2Left) {
            //    left = nums1Cut + 1;
            //} else {
            //    right = nums1Cut - 1;
            //}
            } else if (nums1Left > nums2Right) {
                right = nums1Cut - 1;
            } else {
                left = nums1Cut + 1;
            }
        }
        return 0.0;
    }
}
