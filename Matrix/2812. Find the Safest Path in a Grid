
import java.util.*;

class Solution {
    int n;
    int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

    public int maximumSafenessFactor(List<List<Integer>> grid) {
        n = grid.size();
        List<int[]> thieves = new ArrayList<>();

        // Collect all thief positions
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid.get(i).get(j) == 1) {
                    thieves.add(new int[]{i, j});
                }
            }
        }

        // Calculate minimum distances from any thief to all cells
        int[][] dist = calculateDistances(grid, thieves);

        // Binary search for the maximum safeness factor
        int low = 0, high = n * 2;
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (canReach(grid, dist, mid)) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }

        return low - 1;
    }

    private int[][] calculateDistances(List<List<Integer>> grid, List<int[]> thieves) {
        int[][] dist = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dist[i], Integer.MAX_VALUE);
        }

        Queue<int[]> queue = new LinkedList<>();
        for (int[] thief : thieves) {
            queue.offer(thief);
            dist[thief[0]][thief[1]] = 0;
        }

        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            for (int[] dir : directions) {
                int x = cur[0] + dir[0], y = cur[1] + dir[1];
                if (x >= 0 && x < n && y >= 0 && y < n && grid.get(x).get(y) == 0 && dist[x][y] > dist[cur[0]][cur[1]] + 1) {
                    dist[x][y] = dist[cur[0]][cur[1]] + 1;
                    queue.offer(new int[]{x, y});
                }
            }
        }

        return dist;
    }

    private boolean canReach(List<List<Integer>> grid, int[][] dist, int d) {
        if (dist[0][0] < d || dist[n-1][n-1] < d) return false;

        // BFS to check reachability with given safeness factor d
        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[n][n];
        queue.offer(new int[]{0, 0});
        visited[0][0] = true;

        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int i = cur[0], j = cur[1];

            if (i == n - 1 && j == n - 1) {
                return true;
            }

            for (int[] dir : directions) {
                int x = i + dir[0], y = j + dir[1];
                if (x >= 0 && x < n && y >= 0 && y < n && !visited[x][y] && dist[x][y] >= d) {
                    visited[x][y] = true;
                    queue.offer(new int[]{x, y});
                }
            }
        }

        return false;
    }
}
