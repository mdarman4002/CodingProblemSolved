/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummyList = new ListNode(-1);
        // head of list1
        ListNode p1 = list1;
        // head of list2
        ListNode p2 = list2;
        // dummyList to output referneces (-1 excluded)
        ListNode output = dummyList;

        while(p1!= null && p2 != null){
           
            if(p1.val <= p2.val){
                dummyList.next = p1;
                p1 = p1.next;
            }else if( p1.val > p2.val){
                dummyList.next = p2;
                p2 = p2.next;
            }
            dummyList = dummyList.next;
        }
        if(p1 == null){
            dummyList.next = p2;
        }else{
            dummyList.next = p1;
        }
        return output.next;
    }
}

-----------              -Documentation         -------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

Class: Solution

Description:
This class contains a method to merge two sorted singly-linked lists into one sorted list.

Method: mergeTwoLists(ListNode list1, ListNode list2)

Description:
This method merges two sorted singly-linked lists 'list1' and 'list2' into one sorted list and returns the head of the merged list.

Parameters:
- list1: The head node of the first sorted singly-linked list.
- list2: The head node of the second sorted singly-linked list.

Returns:
- The head node of the merged sorted singly-linked list.

Algorithm:
1. Initialize a dummy node 'dummyList' to -1 as the starting point of the merged list.
2. Initialize pointers 'p1' and 'p2' to the heads of 'list1' and 'list2' respectively.
3. Initialize 'output' to refer to the dummyList (for output reference).
4. Traverse both lists using a while loop until either 'p1' or 'p2' becomes null:
   a. If the value of 'p1' is less than or equal to the value of 'p2', append 'p1' to the merged list and move 'p1' to its next node.
   b. If the value of 'p1' is greater than 'p2', append 'p2' to the merged list and move 'p2' to its next node.
   c. Move the dummyList pointer to its next node.
5. After the loop, if 'p1' is null, append the remaining nodes of 'list2' to the merged list.
   Otherwise, append the remaining nodes of 'list1' to the merged list.
6. Return the head of the merged list, which is 'output.next' since 'dummyList' initially points to -1.

Example Usage:
// Define ListNode class and create two sorted linked lists
ListNode node1 = new ListNode(1);
ListNode node2 = new ListNode(3);
ListNode node3 = new ListNode(5);
node1.next = node2;
node2.next = node3;

ListNode node4 = new ListNode(2);
ListNode node5 = new ListNode(4);
ListNode node6 = new ListNode(6);
node4.next = node5;
node5.next = node6;

Solution solution = new Solution();
ListNode mergedList = solution.mergeTwoLists(node1, node4);
// Print or use 'mergedList' as needed
