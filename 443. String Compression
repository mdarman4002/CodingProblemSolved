
class Solution {
    public int compress(char[] chars) {
        int count = 1 ;
        StringBuilder sb = new StringBuilder("");

        sb.append(chars[0]);

        for(int i = 1 ;i<chars.length;i++){

            if(chars[i-1]!=chars[i]){
                if(count>1){
                    sb.append(count+"");
                }
                sb.append(chars[i]);
                count = 1;

            }else{
                count++;
            }
        }

        if(count>1){
            sb.append(count+"");
        }

        for(int i=0;i<sb.length();i++){
            char ch = sb.charAt(i);
            chars[i]=ch;
        }

        return sb.length();
    }
}


//---------------------Documentation ------------------------------------------------------
Class: Solution

Description:
This class contains a method to compress a character array by replacing consecutive duplicate characters with their count followed by the character itself.

Method: compress(char[] chars)

Description:
This method compresses the input character array by replacing consecutive duplicate characters with their count and character.

Parameters:
- chars: An array of characters that needs to be compressed.

Returns:
- The length of the compressed array.

Algorithm:
1. Initialize a variable 'count' to 1 to track the consecutive occurrences of a character.
2. Initialize a StringBuilder 'sb' to store the compressed characters.
3. Append the first character of the array to 'sb'.
4. Iterate through the array starting from the second character:
   a. If the current character is different from the previous one:
      - If 'count' is greater than 1, append the count to 'sb' followed by the current character.
      - Append the current character to 'sb' and reset 'count' to 1.
   b. If the current character is the same as the previous one, increment 'count'.
5. If 'count' is greater than 1 after the loop, append the count to 'sb'.
6. Copy the characters from 'sb' back to the original 'chars' array.
7. Return the length of the compressed 'sb'.

Example Usage:
char[] input = {'a', 'a', 'b', 'b', 'c', 'c', 'c'};
Solution solution = new Solution();
int compressedLength = solution.compress(input);
System.out.println("Compressed length: " + compressedLength);
